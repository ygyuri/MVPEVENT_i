name: Build and Deploy to VM

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  # ====================
  # BUILD JOB
  # ====================
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Verify image assets
        run: |
          echo "üîç Checking image assets..."
          echo "üìÅ Client directory structure:"
          ls -la client/ || echo "No client directory"
          echo "üìÅ Client public directory contents:"
          if [ -d "client/public/" ]; then
            ls -la client/public/ || echo "No public directory"
            echo "üìÅ Client logos directory contents:"
            if [ -d "client/public/logos/" ]; then
              ls -la client/public/logos/ || echo "No logos directory"
            fi
          fi
          echo "üìÅ Server uploads directory contents:"
          ls -la server/uploads/ || echo "No uploads directory"
          echo "‚úÖ Image asset verification completed"
      - name: Build images (no push)
        run: docker compose -f docker-compose.prod.yml build

  # ====================
  # TRANSFER JOB
  # ====================
  transfer:
    needs: build
    runs-on: ubuntu-latest
    if: always() && needs.build.result == 'success'
    steps:
      - uses: actions/checkout@v4
      - name: Create production environment file
        run: |
          cat > .env.production << 'EOF'
          # Application Configuration
          NODE_ENV=${{ secrets.NODE_ENV }}
          SERVER_PORT=${{ secrets.SERVER_PORT }}
          FRONTEND_URL=${{ secrets.FRONTEND_URL }}
          BASE_URL=${{ secrets.BASE_URL }}
          
          # GKE Configuration
          KUBERNETES_NAMESPACE=${{ secrets.KUBERNETES_NAMESPACE }}
          GKE_CLUSTER_NAME=${{ secrets.GKE_CLUSTER_NAME }}
          GKE_ZONE=${{ secrets.GKE_ZONE }}
          PROJECT_ID=${{ secrets.PROJECT_ID }}
          
          # Nginx Configuration
          NGINX_HTTP_PORT=${{ secrets.NGINX_HTTP_PORT }}
          NGINX_HTTPS_PORT=${{ secrets.NGINX_HTTPS_PORT }}
          
          # Database Configuration
          MONGO_ROOT_USERNAME=${{ secrets.MONGO_ROOT_USERNAME }}
          MONGO_ROOT_PASSWORD=${{ secrets.MONGO_ROOT_PASSWORD }}
          MONGODB_URI=${{ secrets.MONGODB_URI }}
          
          # Redis Configuration
          REDIS_URL=${{ secrets.REDIS_URL }}
          
          # JWT Configuration
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          JWT_REFRESH_SECRET=${{ secrets.JWT_REFRESH_SECRET }}
          JWT_EXPIRES_IN=${{ secrets.JWT_EXPIRES_IN }}
          JWT_REFRESH_EXPIRES_IN=${{ secrets.JWT_REFRESH_EXPIRES_IN }}
          
          # PayHero Configuration
          PAYHERO_API_USERNAME=${{ secrets.PAYHERO_API_USERNAME }}
          PAYHERO_API_PASSWORD=${{ secrets.PAYHERO_API_PASSWORD }}
          PAYHERO_ACCOUNT_ID=${{ secrets.PAYHERO_ACCOUNT_ID }}
          PAYHERO_BASIC_AUTH_TOKEN=${{ secrets.PAYHERO_BASIC_AUTH_TOKEN }}
          PAYHERO_CHANNEL_ID=${{ secrets.PAYHERO_CHANNEL_ID }}
          PAYHERO_CALLBACK_URL=${{ secrets.PAYHERO_CALLBACK_URL }}
          PAYHERO_SUCCESS_URL=${{ secrets.PAYHERO_SUCCESS_URL }}
          PAYHERO_FAILED_URL=${{ secrets.PAYHERO_FAILED_URL }}
          
          # MPESA Configuration
          MPESA_BASE_URL=${{ secrets.MPESA_BASE_URL }}
          MPESA_CONSUMER_KEY=${{ secrets.MPESA_CONSUMER_KEY }}
          MPESA_CONSUMER_SECRET=${{ secrets.MPESA_CONSUMER_SECRET }}
          MPESA_PASSKEY=${{ secrets.MPESA_PASSKEY }}
          MPESA_SHORTCODE=${{ secrets.MPESA_SHORTCODE }}
          MPESA_CALLBACK_URL=${{ secrets.MPESA_CALLBACK_URL }}
          MPESA_TIMEOUT_URL=${{ secrets.MPESA_TIMEOUT_URL }}
          
          # Email Configuration
          SMTP_HOST=${{ secrets.SMTP_HOST }}
          SMTP_PORT=${{ secrets.SMTP_PORT }}
          SMTP_USER=${{ secrets.SMTP_USER }}
          SMTP_PASS=${{ secrets.SMTP_PASS }}
          EMAIL_FROM=${{ secrets.EMAIL_FROM }}
          
          # Security Configuration
          TICKET_QR_SECRET=${{ secrets.TICKET_QR_SECRET }}
          TICKET_QR_ENC_KEY=${{ secrets.TICKET_QR_ENC_KEY }}
          TICKET_QR_AUTO_ROTATE_MS=${{ secrets.TICKET_QR_AUTO_ROTATE_MS }}
          
          # Rate Limiting
          RATE_LIMIT_WINDOW_MS=${{ secrets.RATE_LIMIT_WINDOW_MS }}
          RATE_LIMIT_MAX_REQUESTS=${{ secrets.RATE_LIMIT_MAX_REQUESTS }}
          
          # Debug Configuration
          DEBUG=${{ secrets.DEBUG }}
          LOG_LEVEL=${{ secrets.LOG_LEVEL }}
          
          # Monitoring and Logging
          SENTRY_DSN=${{ secrets.SENTRY_DSN }}
          LOG_TO_FILE=${{ secrets.LOG_TO_FILE }}
          LOG_FILE_PATH=${{ secrets.LOG_FILE_PATH }}
          EOF
      - name: Transfer environment file to VM
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          source: ".env.production"
          target: "/tmp/.env.production"
          port: ${{ secrets.VM_SSH_PORT || 22 }}
          timeout: 120s
          command_timeout: 10m
          debug: true

  # ====================
  # EXECUTE JOB
  # ====================
  execute:
    needs: transfer
    runs-on: ubuntu-latest
    if: always() && needs.transfer.result == 'success'
    steps:
      - uses: actions/checkout@v4
      - name: SSH deploy to VM
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          port: ${{ secrets.VM_SSH_PORT || 22 }}
          timeout: 120s
          command_timeout: 10m
          debug: true
          script: |
            set -e
            cat > /tmp/deploy.sh << 'DEPLOYMENT_SCRIPT'
            set -e
            echo "üöÄ Starting deployment..."
            
            # Ensure git and other essential tools are installed
            echo "üì¶ Checking for required tools..."
            if ! command -v git &> /dev/null; then
              echo "üì• Installing git..."
              sudo apt update
              sudo apt install -y git curl
            fi
            
            # Ensure repo exists and is up to date
            if [ -d /root/MVPEVENT_i/.git ]; then
              echo "üìÅ Repository exists, updating..."
              cd /root/MVPEVENT_i
              git remote set-url origin https://github.com/ygyuri/MVPEVENT_i.git
              git fetch --all
              git reset --hard origin/main
            else
              echo "üìÅ Cloning repository..."
              rm -rf /root/MVPEVENT_i || true
              git clone https://github.com/ygyuri/MVPEVENT_i.git /root/MVPEVENT_i
              cd /root/MVPEVENT_i
            fi
            
            # Move and secure environment file
            if [ -d /tmp/.env.production ]; then
              sudo cp /tmp/.env.production/.env.production /root/MVPEVENT_i/.env.production
              sudo rm -rf /tmp/.env.production
            else
              sudo mv /tmp/.env.production /root/MVPEVENT_i/.env.production
            fi
            
            # Set proper permissions
            sudo chmod 755 /root/MVPEVENT_i
            sudo chown root:root /root/MVPEVENT_i/.env.production
            sudo chmod 600 /root/MVPEVENT_i/.env.production
            sudo cp /root/MVPEVENT_i/.env.production /root/MVPEVENT_i/.env
            sudo chown root:docker /root/MVPEVENT_i/.env
            sudo chmod 640 /root/MVPEVENT_i/.env
            
            # Ensure Docker is installed
            if ! command -v docker &> /dev/null; then
              echo "üì¶ Installing Docker..."
              sudo apt update
              sudo apt install -y ca-certificates curl gnupg lsb-release
              sudo mkdir -p /etc/apt/keyrings
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
              echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
              sudo apt update
              sudo apt install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
            fi
            
            # Setup SSL certificates with expiry checking
            sudo mkdir -p /root/MVPEVENT_i/nginx/ssl
            
            CERT_PATH="/etc/letsencrypt/live/event-i.co.ke/fullchain.pem"
            
            if [ -f "$CERT_PATH" ]; then
              # Certificate exists, check expiry date
              echo "üîç Checking certificate expiry..."
              CERT_EXPIRY=$(sudo openssl x509 -enddate -noout -in "$CERT_PATH" | cut -d= -f2)
              CERT_EXPIRY_EPOCH=$(date -d "$CERT_EXPIRY" +%s 2>/dev/null || date -j -f "%b %d %H:%M:%S %Y" "$CERT_EXPIRY" +%s 2>/dev/null || echo "0")
              CURRENT_EPOCH=$(date +%s)
              DAYS_UNTIL_EXPIRY=$(( (CERT_EXPIRY_EPOCH - CURRENT_EPOCH) / 86400 ))
              
              if [ $DAYS_UNTIL_EXPIRY -gt 30 ]; then
                echo "‚úÖ Using existing valid SSL certificate (expires in $DAYS_UNTIL_EXPIRY days)"
                sudo cp "$CERT_PATH" /root/MVPEVENT_i/nginx/ssl/cert.pem
                sudo cp /etc/letsencrypt/live/event-i.co.ke/privkey.pem /root/MVPEVENT_i/nginx/ssl/key.pem
              else
                echo "‚ö†Ô∏è Certificate expiring soon ($DAYS_UNTIL_EXPIRY days), attempting renewal..."
                # Try to renew (this is safer and avoids rate limits)
                sudo certbot renew --cert-name event-i.co.ke --non-interactive 2>&1 || {
                  echo "‚ö†Ô∏è Renewal failed or not needed, using existing certificate"
                }
                # Copy the certificate (renewed or existing)
                sudo cp "$CERT_PATH" /root/MVPEVENT_i/nginx/ssl/cert.pem
                sudo cp /etc/letsencrypt/live/event-i.co.ke/privkey.pem /root/MVPEVENT_i/nginx/ssl/key.pem
              fi
            else
              echo "üìù No existing certificates, generating new ones..."
              # Install certbot if needed
              if ! command -v certbot &> /dev/null; then
                echo "üì¶ Installing certbot..."
                sudo apt update
                sudo apt install -y certbot 2>/dev/null || {
                  # Fall back to snap if apt fails
                  sudo apt install -y snapd
                  sudo snap install core
                  sudo snap refresh core
                  sudo snap install --classic certbot
                  sudo ln -sf /snap/bin/certbot /usr/bin/certbot
                }
              fi
              
              # Try to generate new certificate
              if sudo certbot certonly --standalone --non-interactive --agree-tos --email admin@event-i.co.ke -d event-i.co.ke; then
                echo "‚úÖ Let's Encrypt certificate generated successfully"
                sudo cp "$CERT_PATH" /root/MVPEVENT_i/nginx/ssl/cert.pem
                sudo cp /etc/letsencrypt/live/event-i.co.ke/privkey.pem /root/MVPEVENT_i/nginx/ssl/key.pem
              else
                echo "‚ö†Ô∏è Let's Encrypt failed (possibly rate limited), creating self-signed certificate..."
                sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
                  -keyout /root/MVPEVENT_i/nginx/ssl/key.pem \
                  -out /root/MVPEVENT_i/nginx/ssl/cert.pem \
                  -subj "/C=KE/ST=Kenya/L=Nairobi/O=Event-i/CN=event-i.co.ke"
              fi
            fi
            
            # Ensure certificates have correct permissions
            sudo chmod 644 /root/MVPEVENT_i/nginx/ssl/cert.pem
            sudo chmod 600 /root/MVPEVENT_i/nginx/ssl/key.pem
            echo "‚úÖ SSL certificates configured"
            
            # Update .env with Docker service names
            sudo cp /root/MVPEVENT_i/.env /root/MVPEVENT_i/.env.backup
            MONGO_USER="${{ secrets.MONGO_ROOT_USERNAME }}"
            MONGO_PASS="${{ secrets.MONGO_ROOT_PASSWORD }}"
            MONGO_PASS_ENCODED=$(python3 -c "import urllib.parse; print(urllib.parse.quote(\"${MONGO_PASS}\"))")
            sudo sed -i "s|MONGODB_URI=.*|MONGODB_URI=mongodb://${MONGO_USER}:${MONGO_PASS_ENCODED}@mongodb:27017/event_i_production?authSource=admin|g" /root/MVPEVENT_i/.env
            sudo sed -i "s|REDIS_URL=.*|REDIS_URL=redis://redis:6379|g" /root/MVPEVENT_i/.env
            
            # Deploy with Docker Compose
            cd /root/MVPEVENT_i
            sudo docker compose -f docker-compose.prod.yml down --remove-orphans || true
            sudo docker compose -f docker-compose.prod.yml build --no-cache --pull
            sudo docker compose -f docker-compose.prod.yml up -d --force-recreate --remove-orphans
            
            # Wait and verify
            echo "‚è≥ Waiting for services to start..."
            sleep 30
            
            echo "üìã Container Status:"
            sudo docker compose -f /root/MVPEVENT_i/docker-compose.prod.yml ps
            
            echo "‚úÖ Deployment completed successfully!"
            DEPLOYMENT_SCRIPT
            
            chmod +x /tmp/deploy.sh
            sudo bash /tmp/deploy.sh
            rm /tmp/deploy.sh

  # ====================
  # HEALTH CHECK JOB
  # ====================
  health-check:
    needs: execute
    runs-on: ubuntu-latest
    if: always() && needs.execute.result == 'success'
    steps:
      - uses: actions/checkout@v4
      - name: SSH health check on VM
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          port: ${{ secrets.VM_SSH_PORT || 22 }}
          timeout: 120s
          command_timeout: 10m
          debug: true
          script: |
            set -e
            echo "üè• Starting health checks..."
            
            # Wait for services to fully initialize
            echo "‚è≥ Waiting for services to initialize..."
            sleep 15
            
            # Check container status
            echo "üìã Checking container status..."
            cd /root/MVPEVENT_i
            sudo docker compose -f docker-compose.prod.yml ps
            
            # Check if all containers are running
            if ! sudo docker compose -f docker-compose.prod.yml ps | grep -q "Up"; then
              echo "‚ùå Some containers are not running"
              echo "üìã Container logs:"
              sudo docker compose -f docker-compose.prod.yml logs --tail=50
              exit 1
            fi
            echo "‚úÖ All containers are running"
            
            # Test API health endpoint
            echo "üîç Testing API health endpoint..."
            api_healthy=false
            for i in {1..5}; do
              if curl -f -s -k https://event-i.co.ke/api/health > /dev/null 2>&1; then
                echo "‚úÖ API health check passed (attempt $i)"
                api_healthy=true
                break
              else
                echo "‚è≥ API health check attempt $i failed, retrying..."
                sleep 5
              fi
            done
            
            if [ "$api_healthy" = false ]; then
              echo "‚ùå API health check failed after 5 attempts"
              echo "üìã Server logs:"
              sudo docker compose -f docker-compose.prod.yml logs server --tail=50
              exit 1
            fi
            
            # Test frontend accessibility
            echo "üîç Testing frontend accessibility..."
            frontend_healthy=false
            for i in {1..5}; do
              if curl -f -s -k https://event-i.co.ke/ > /dev/null 2>&1; then
                echo "‚úÖ Frontend accessibility check passed (attempt $i)"
                frontend_healthy=true
                break
              else
                echo "‚è≥ Frontend accessibility check attempt $i failed, retrying..."
                sleep 5
              fi
            done
            
            if [ "$frontend_healthy" = false ]; then
              echo "‚ùå Frontend accessibility check failed after 5 attempts"
              echo "üìã Client logs:"
              sudo docker compose -f docker-compose.prod.yml logs client --tail=50
              exit 1
            fi
            
            # Summary
            echo ""
            echo "üìä Health Check Summary"
            echo "===================="
            echo "‚úÖ All containers running"
            echo "‚úÖ API health endpoint responding"
            echo "‚úÖ Frontend accessible"
            echo ""
            echo "üîó Service URLs:"
            echo "   Frontend: https://event-i.co.ke/"
            echo "   API:      https://event-i.co.ke/api/health"
            echo "   Health:   https://event-i.co.ke/health"
            echo ""
            echo "‚úÖ All health checks passed!"

