name: Build and Deploy to VM

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build images (no push)
        run: docker compose -f docker-compose.prod.yml build

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: always() && needs.build.result == 'success'
    steps:
      - uses: actions/checkout@v4
      - name: SSH deploy to VM
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          script: |
            set -e
            sudo bash -lc '
              set -e
              echo "🚀 Starting deployment..."
              
              # Ensure repo exists and is up to date
              if [ -d /root/MVPEVENT_i/.git ]; then
                echo "📁 Repository exists, updating..."
                cd /root/MVPEVENT_i
                git remote set-url origin https://github.com/ygyuri/MVPEVENT_i.git
                git fetch --all
                git reset --hard origin/main
              else
                echo "📁 Cloning repository..."
                rm -rf /root/MVPEVENT_i || true
                git clone https://github.com/ygyuri/MVPEVENT_i.git /root/MVPEVENT_i
                cd /root/MVPEVENT_i
              fi
              
              # Show current commit
              echo "📝 Current commit: $(git log --oneline -1)"
              
              # Clean up old images to save space
              echo "🧹 Cleaning up old Docker images..."
              docker image prune -f || true
              
              # Build with no cache to ensure fresh builds
              echo "🔨 Building Docker images..."
              docker compose -f docker-compose.prod.yml build --no-cache
              
              # Deploy
              echo "🚀 Deploying containers..."
              docker compose -f docker-compose.prod.yml up -d
              
              # Wait for health checks
              echo "⏳ Waiting for health checks..."
              sleep 15
              
              # Verify deployment
              echo "✅ Checking deployment status..."
              docker compose -f docker-compose.prod.yml ps
              
              # Test API health
              echo "🔍 Testing API health..."
              if curl -f -s https://localhost/api/health > /dev/null; then
                echo "✅ API health check passed"
              else
                echo "❌ API health check failed"
                exit 1
              fi
              
              # Test frontend accessibility
              echo "🔍 Testing frontend accessibility..."
              if curl -f -s https://localhost/ > /dev/null; then
                echo "✅ Frontend accessibility check passed"
              else
                echo "❌ Frontend accessibility check failed"
                exit 1
              fi
              
              echo "🎉 Deployment completed successfully!"
            '

