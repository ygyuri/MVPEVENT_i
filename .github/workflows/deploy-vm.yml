name: Build and Deploy to VM

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Verify image assets
        run: |
          echo "üîç Checking image assets..."
          echo "üìÅ Client directory structure:"
          ls -la client/ || echo "No client directory"
          echo "üìÅ Client public directory contents:"
          if [ -d "client/public/" ]; then
            ls -la client/public/ || echo "No public directory"
            echo "üìÅ Client logos directory contents:"
            if [ -d "client/public/logos/" ]; then
              ls -la client/public/logos/ || echo "No logos directory"
            else
              echo "‚ö†Ô∏è No logos directory in public/"
            fi
          else
            echo "‚ö†Ô∏è No public directory found"
          fi
          echo "üìÅ Server uploads directory contents:"
          ls -la server/uploads/ || echo "No uploads directory"
          echo "‚úÖ Image asset verification completed"
      - name: Build images (no push)
        run: docker compose -f docker-compose.prod.yml build

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: always() && needs.build.result == 'success'
    steps:
      - uses: actions/checkout@v4
      - name: Create production environment file
        run: |
          cat > .env.production << 'EOF'
          # Application Configuration
          NODE_ENV=${{ secrets.NODE_ENV }}
          SERVER_PORT=${{ secrets.SERVER_PORT }}
          FRONTEND_URL=${{ secrets.FRONTEND_URL }}
          BASE_URL=${{ secrets.BASE_URL }}
          
          # GKE Configuration
          KUBERNETES_NAMESPACE=${{ secrets.KUBERNETES_NAMESPACE }}
          GKE_CLUSTER_NAME=${{ secrets.GKE_CLUSTER_NAME }}
          GKE_ZONE=${{ secrets.GKE_ZONE }}
          PROJECT_ID=${{ secrets.PROJECT_ID }}
          
          # Nginx Configuration
          NGINX_HTTP_PORT=${{ secrets.NGINX_HTTP_PORT }}
          NGINX_HTTPS_PORT=${{ secrets.NGINX_HTTPS_PORT }}
          
          # Database Configuration
          MONGO_ROOT_USERNAME=${{ secrets.MONGO_ROOT_USERNAME }}
          MONGO_ROOT_PASSWORD=${{ secrets.MONGO_ROOT_PASSWORD }}
          MONGODB_URI=${{ secrets.MONGODB_URI }}
          
          # Redis Configuration
          REDIS_URL=${{ secrets.REDIS_URL }}
          
          # JWT Configuration
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          JWT_REFRESH_SECRET=${{ secrets.JWT_REFRESH_SECRET }}
          JWT_EXPIRES_IN=${{ secrets.JWT_EXPIRES_IN }}
          JWT_REFRESH_EXPIRES_IN=${{ secrets.JWT_REFRESH_EXPIRES_IN }}
          
          # PayHero Configuration
          PAYHERO_API_USERNAME=${{ secrets.PAYHERO_API_USERNAME }}
          PAYHERO_API_PASSWORD=${{ secrets.PAYHERO_API_PASSWORD }}
          PAYHERO_ACCOUNT_ID=${{ secrets.PAYHERO_ACCOUNT_ID }}
          PAYHERO_BASIC_AUTH_TOKEN=${{ secrets.PAYHERO_BASIC_AUTH_TOKEN }}
          PAYHERO_CHANNEL_ID=${{ secrets.PAYHERO_CHANNEL_ID }}
          PAYHERO_CALLBACK_URL=${{ secrets.PAYHERO_CALLBACK_URL }}
          PAYHERO_SUCCESS_URL=${{ secrets.PAYHERO_SUCCESS_URL }}
          PAYHERO_FAILED_URL=${{ secrets.PAYHERO_FAILED_URL }}
          
          # MPESA Configuration
          MPESA_BASE_URL=${{ secrets.MPESA_BASE_URL }}
          MPESA_CONSUMER_KEY=${{ secrets.MPESA_CONSUMER_KEY }}
          MPESA_CONSUMER_SECRET=${{ secrets.MPESA_CONSUMER_SECRET }}
          MPESA_PASSKEY=${{ secrets.MPESA_PASSKEY }}
          MPESA_SHORTCODE=${{ secrets.MPESA_SHORTCODE }}
          MPESA_CALLBACK_URL=${{ secrets.MPESA_CALLBACK_URL }}
          MPESA_TIMEOUT_URL=${{ secrets.MPESA_TIMEOUT_URL }}
          
          # Email Configuration
          SMTP_HOST=${{ secrets.SMTP_HOST }}
          SMTP_PORT=${{ secrets.SMTP_PORT }}
          SMTP_USER=${{ secrets.SMTP_USER }}
          SMTP_PASS=${{ secrets.SMTP_PASS }}
          EMAIL_FROM=${{ secrets.EMAIL_FROM }}
          
          # Security Configuration
          TICKET_QR_SECRET=${{ secrets.TICKET_QR_SECRET }}
          TICKET_QR_ENC_KEY=${{ secrets.TICKET_QR_ENC_KEY }}
          TICKET_QR_AUTO_ROTATE_MS=${{ secrets.TICKET_QR_AUTO_ROTATE_MS }}
          
          # Rate Limiting
          RATE_LIMIT_WINDOW_MS=${{ secrets.RATE_LIMIT_WINDOW_MS }}
          RATE_LIMIT_MAX_REQUESTS=${{ secrets.RATE_LIMIT_MAX_REQUESTS }}
          
          # Debug Configuration
          DEBUG=${{ secrets.DEBUG }}
          LOG_LEVEL=${{ secrets.LOG_LEVEL }}
          
          # Monitoring and Logging
          SENTRY_DSN=${{ secrets.SENTRY_DSN }}
          LOG_TO_FILE=${{ secrets.LOG_TO_FILE }}
          LOG_FILE_PATH=${{ secrets.LOG_FILE_PATH }}
          EOF
      - name: Transfer environment file to VM
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          source: ".env.production"
          target: "/tmp/.env.production"
          port: ${{ secrets.VM_SSH_PORT || 22 }}
          timeout: 120s
          command_timeout: 10m
          debug: true
      - name: SSH deploy to VM
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          port: ${{ secrets.VM_SSH_PORT || 22 }}
          timeout: 120s
          command_timeout: 10m
          debug: true
          script: |
            set -e
            cat > /tmp/deploy.sh << 'DEPLOYMENT_SCRIPT'
            set -e
            echo "üöÄ Starting deployment..."
            
            # Ensure git and other essential tools are installed
            echo "üì¶ Checking for required tools..."
            if ! command -v git &> /dev/null; then
              echo "üì• Installing git..."
              sudo apt update
              sudo apt install -y git curl
            else
              echo "‚úÖ Git is already installed"
            fi
            
            # Ensure repo exists and is up to date
            if [ -d /root/MVPEVENT_i/.git ]; then
                echo "üìÅ Repository exists, updating..."
                cd /root/MVPEVENT_i
                git remote set-url origin https://github.com/ygyuri/MVPEVENT_i.git
                git fetch --all
                git reset --hard origin/main
              else
                echo "üìÅ Cloning repository..."
                rm -rf /root/MVPEVENT_i || true
                git clone https://github.com/ygyuri/MVPEVENT_i.git /root/MVPEVENT_i
                cd /root/MVPEVENT_i
              fi
              
              # Show current commit
              echo "üìù Current commit: $(git log --oneline -1)"
              
              # Verify image assets are present
              echo "üîç Verifying image assets..."
              echo "üìÅ Client directory structure:"
              ls -la /root/MVPEVENT_i/client/ || echo "No client directory"
              echo "üìÅ Client public directory contents:"
              if [ -d "/root/MVPEVENT_i/client/public/" ]; then
                ls -la /root/MVPEVENT_i/client/public/ || echo "No public directory"
                echo "üìÅ Client logos directory contents:"
                if [ -d "/root/MVPEVENT_i/client/public/logos/" ]; then
                  ls -la /root/MVPEVENT_i/client/public/logos/ || echo "No logos directory"
                else
                  echo "‚ö†Ô∏è No logos directory in public/"
                fi
              else
                echo "‚ö†Ô∏è No public directory found"
              fi
              echo "üìÅ Server uploads directory contents:"
              ls -la /root/MVPEVENT_i/server/uploads/ || echo "No uploads directory"
              echo "‚úÖ Image asset verification completed"
              
              # Move and secure environment file
              echo "üîê Setting up environment file..."
              # Debug: Check what's in /tmp
              echo "üìã Contents of /tmp/.env.production:"
              ls -la /tmp/.env.production || echo "File not found"
              
              # Handle case where .env.production might be a directory
              if [ -d /tmp/.env.production ]; then
                echo "üìÅ Found directory, extracting file..."
                # Copy the file from the directory
                sudo cp /tmp/.env.production/.env.production /root/MVPEVENT_i/.env.production
                # Clean up the temporary directory
                sudo rm -rf /tmp/.env.production
              else
                echo "üìÑ Found file, moving directly..."
                # Remove existing file/directory if it exists
                sudo rm -rf /root/MVPEVENT_i/.env.production || true
                # Move the new file
                sudo mv /tmp/.env.production /root/MVPEVENT_i/.env.production
              fi
              
              # Set proper permissions for Docker Compose access
              echo "üîê Setting up permissions for Docker Compose..."
              
              # Make sure the directory is accessible
              sudo chmod 755 /root/MVPEVENT_i
              
              # Set permissions for .env.production (keep secure)
              sudo chown root:root /root/MVPEVENT_i/.env.production
              sudo chmod 600 /root/MVPEVENT_i/.env.production
              
              # Create .env file for docker compose (it looks for .env by default)
              echo "üìÑ Creating .env file for docker compose..."
              echo "üìã Checking if .env.production exists:"
              sudo ls -la /root/MVPEVENT_i/.env.production || echo "‚ùå .env.production not found"
              
              # Copy the file
              sudo cp /root/MVPEVENT_i/.env.production /root/MVPEVENT_i/.env
              echo "üìã Copy completed, setting permissions..."
              
              # Set permissions for .env file (Docker Compose needs to read this)
              sudo chown root:docker /root/MVPEVENT_i/.env
              sudo chmod 640 /root/MVPEVENT_i/.env
              
              # Verify the files were created correctly
              echo "üìã Environment files created successfully:"
              sudo ls -la /root/MVPEVENT_i/.env.production
              sudo ls -la /root/MVPEVENT_i/.env
              
              # Ensure we're in the correct directory for docker compose commands
              echo "üìÅ Current working directory: $(pwd)"
              echo "üìã Contents of current directory:"
              ls -la
              
              # Setup Let's Encrypt SSL certificates
              echo "üîê Setting up Let's Encrypt SSL certificates..."
              
              # Ensure SSL directory exists
              sudo mkdir -p /root/MVPEVENT_i/nginx/ssl
              
              # Only attempt SSL certificate generation if docker is installed
              if command -v docker &> /dev/null; then
                # Install certbot if not already installed
                if ! command -v certbot &> /dev/null; then
                  echo "üì¶ Installing certbot..."
                  sudo apt update
                  sudo apt install -y certbot
                fi
                
                # Check if certificates already exist
                if [ -f /etc/letsencrypt/live/event-i.co.ke/fullchain.pem ] && [ -f /etc/letsencrypt/live/event-i.co.ke/privkey.pem ]; then
                  echo "‚úÖ SSL certificates already exist"
                  CERTIFICATES_EXIST=true
                else
                  echo "üìù SSL certificates do not exist, generating new ones..."
                  CERTIFICATES_EXIST=false
                  
                  # Stop nginx temporarily for certificate generation
                  echo "üõë Temporarily stopping nginx for certificate generation..."
                  sudo docker compose -f /root/MVPEVENT_i/docker-compose.prod.yml stop nginx || true
                  
                  # Generate Let's Encrypt certificate
                  echo "üîë Generating Let's Encrypt certificate for event-i.co.ke..."
                  if sudo certbot certonly --standalone \
                    --non-interactive \
                    --agree-tos \
                    --email admin@event-i.co.ke \
                    -d event-i.co.ke; then
                    echo "‚úÖ Certificate generation successful"
                  else
                    echo "‚ö†Ô∏è Certificate generation failed"
                    CERTIFICATES_EXIST=false
                  fi
                fi
                
                # Copy certificates to nginx ssl directory if they exist
                if [ -f /etc/letsencrypt/live/event-i.co.ke/fullchain.pem ]; then
                  echo "üìÅ Copying certificates to nginx ssl directory..."
                  sudo cp /etc/letsencrypt/live/event-i.co.ke/fullchain.pem /root/MVPEVENT_i/nginx/ssl/cert.pem
                  sudo cp /etc/letsencrypt/live/event-i.co.ke/privkey.pem /root/MVPEVENT_i/nginx/ssl/key.pem
                  sudo chmod 644 /root/MVPEVENT_i/nginx/ssl/cert.pem
                  sudo chmod 600 /root/MVPEVENT_i/nginx/ssl/key.pem
                  echo "‚úÖ SSL certificates copied and configured"
                else
                  echo "‚ö†Ô∏è Certificate files not found in expected location"
                fi
              else
                echo "‚ö†Ô∏è Docker not installed yet, skipping SSL certificate generation"
                echo "‚úÖ SSL certificates will be generated after Docker installation"
              fi
              
              echo "‚úÖ SSL certificates setup completed"
              
              # Debug: Show the actual environment file being used
              echo "üîç Debug: Current environment file contents:"
              sudo cat /root/MVPEVENT_i/.env || echo "‚ùå .env file not found"
              echo ""
              echo "üîç Debug: Environment variables for Docker Compose:"
              echo "MONGODB_URI: mongodb://${{ secrets.MONGO_ROOT_USERNAME }}:${{ secrets.MONGO_ROOT_PASSWORD }}@mongodb:27017/event_i_production?authSource=admin"
              echo "REDIS_URL: redis://redis:6379"
              echo ""
              echo "üîç Debug: Email configuration (masked):"
              echo "SMTP_HOST: $(sudo grep SMTP_HOST /root/MVPEVENT_i/.env | cut -d'=' -f2)"
              echo "SMTP_PORT: $(sudo grep SMTP_PORT /root/MVPEVENT_i/.env | cut -d'=' -f2)"
              echo "SMTP_USER: $(sudo grep SMTP_USER /root/MVPEVENT_i/.env | cut -d'=' -f2 | cut -c1-3)..."
              echo "EMAIL_FROM: $(sudo grep EMAIL_FROM /root/MVPEVENT_i/.env | cut -d'=' -f2)"
              echo ""
              
              # Ensure Docker and Docker Compose are installed
              echo "üê≥ Checking for Docker installation..."
              if ! command -v docker &> /dev/null; then
                echo "üì¶ Installing Docker..."
                
                # Install prerequisites
                sudo apt update
                sudo apt install -y ca-certificates curl gnupg lsb-release
                
                # Add Docker's official GPG key
                sudo mkdir -p /etc/apt/keyrings
                curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
                
                # Set up the Docker repository
                echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
                
                # Install Docker Engine
                sudo apt update
                sudo apt install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
                
                # Add current user to docker group (if not root)
                # sudo usermod -aG docker $USER
                
                echo "‚úÖ Docker installed successfully"
              else
                echo "‚úÖ Docker is already installed"
              fi
              
              # Verify Docker is working
              echo "üîç Verifying Docker installation..."
              sudo docker --version
              sudo docker compose version
              
              # Stop existing containers gracefully
              echo "üõë Stopping existing containers..."
              sudo docker compose -f /root/MVPEVENT_i/docker-compose.prod.yml down --remove-orphans || true
              
              # Clean up old images and containers to save space
              echo "üßπ Cleaning up old Docker resources..."
              sudo docker container prune -f || true
              sudo docker image prune -f || true
              sudo docker volume prune -f || true
              
              # Pull latest base images to ensure we have the most recent versions
              echo "üì• Pulling latest base images..."
              sudo docker compose -f /root/MVPEVENT_i/docker-compose.prod.yml pull || true
              
              # Build with no cache and force pull to ensure fresh builds
              echo "üî® Building Docker images with fresh cache..."
              sudo docker compose -f /root/MVPEVENT_i/docker-compose.prod.yml build --no-cache --pull
              
              # Deploy with force recreate to ensure containers are restarted
              echo "üöÄ Deploying containers with force recreate..."
              
              # Create temporary environment file with Docker Compose service names
              echo "üîß Creating temporary environment file with Docker Compose service names..."
              sudo cp /root/MVPEVENT_i/.env /root/MVPEVENT_i/.env.backup
              
              # Update the .env file to use Docker Compose service names
              MONGO_USER="${{ secrets.MONGO_ROOT_USERNAME }}"
              MONGO_PASS="${{ secrets.MONGO_ROOT_PASSWORD }}"
              # URL encode the password to handle special characters
              MONGO_PASS_ENCODED=$(python3 -c "import urllib.parse; print(urllib.parse.quote(\"${MONGO_PASS}\"))")
              # Replace MongoDB URL with proper Docker Compose service name
              sudo sed -i "s|MONGODB_URI=.*|MONGODB_URI=mongodb://${MONGO_USER}:${MONGO_PASS_ENCODED}@mongodb:27017/event_i_production?authSource=admin|g" /root/MVPEVENT_i/.env
              # Replace Redis URL with Docker Compose service name
              sudo sed -i "s|REDIS_URL=.*|REDIS_URL=redis://redis:6379|g" /root/MVPEVENT_i/.env
              
              # Verify the changes
              echo "üîç Updated environment file:"
              sudo grep -E "(MONGODB_URI|REDIS_URL)" /root/MVPEVENT_i/.env
              echo ""
              echo "üîç Debug: MongoDB URL components:"
              echo "MONGO_USER: ${MONGO_USER}"
              echo "MONGO_PASS_ENCODED: ${MONGO_PASS_ENCODED}"
              echo "Final MongoDB URL: mongodb://${MONGO_USER}:${MONGO_PASS_ENCODED}@mongodb:27017/event_i_production?authSource=admin"
              
              sudo docker compose -f /root/MVPEVENT_i/docker-compose.prod.yml up -d --force-recreate --remove-orphans
              
              # Wait for services to start and perform health checks
              echo "‚è≥ Waiting for services to start..."
              sleep 20
              
              # Debug: Check what environment variables the server container is using
              echo "üîç Debug: Server container environment variables:"
              sudo docker compose -f /root/MVPEVENT_i/docker-compose.prod.yml exec server env | grep -E "(MONGODB_URI|REDIS_URL|NODE_ENV|PORT)" || echo "‚ùå Could not get server environment"
              echo ""
              
              # Debug: Test connectivity from server to MongoDB and Redis
              echo "üîç Debug: Testing connectivity from server container:"
              echo "Testing MongoDB connection..."
              sudo docker compose -f /root/MVPEVENT_i/docker-compose.prod.yml exec server nc -zv mongodb 27017 || echo "‚ùå MongoDB connection failed"
              echo "Testing Redis connection..."
              sudo docker compose -f /root/MVPEVENT_i/docker-compose.prod.yml exec server nc -zv redis 6379 || echo "‚ùå Redis connection failed"
              echo ""
              
              # Verify deployment status
              echo "‚úÖ Checking deployment status..."
              echo "üìÅ Current working directory: $(pwd)"
              sudo docker compose -f /root/MVPEVENT_i/docker-compose.prod.yml ps
              
              # Check container health status
              echo "üîç Checking container health..."
              sudo docker compose -f /root/MVPEVENT_i/docker-compose.prod.yml ps --format "table {{.Name}}\t{{.Status}}\t{{.Ports}}"
              
              # Wait for containers to be healthy
              echo "‚è≥ Waiting for containers to be healthy..."
              max_attempts=30
              attempt=1
              
              while [ $attempt -le $max_attempts ]; do
                echo "Health check attempt $attempt/$max_attempts..."
                
                # Check if all containers are running
                if sudo docker compose -f /root/MVPEVENT_i/docker-compose.prod.yml ps | grep -q "Up"; then
                  echo "‚úÖ All containers are running"
                  break
                else
                  echo "‚è≥ Containers still starting..."
                  sleep 10
                  attempt=$((attempt + 1))
                fi
              done
              
              if [ $attempt -gt $max_attempts ]; then
                echo "‚ùå Containers failed to start within timeout"
                echo "üìã Container logs:"
                sudo docker compose -f /root/MVPEVENT_i/docker-compose.prod.yml logs --tail=50
                exit 1
              fi
              
              # Test API health with retries
              echo "üîç Testing API health..."
              api_healthy=false
              for i in {1..5}; do
                # Test both direct API endpoint and nginx health endpoint using production domain
                if curl -f -s -k https://event-i.co.ke/api/health > /dev/null 2>&1 || curl -f -s -k https://event-i.co.ke/health > /dev/null 2>&1; then
                  echo "‚úÖ API health check passed (attempt $i)"
                  api_healthy=true
                  break
                else
                  echo "‚è≥ API health check attempt $i failed, retrying..."
                  sleep 5
                fi
              done
              
              if [ "$api_healthy" = false ]; then
                echo "‚ùå API health check failed after 5 attempts"
                echo "üìã Testing individual components..."
                
                # Test nginx directly
                echo "üîç Testing nginx container..."
                if sudo docker compose -f /root/MVPEVENT_i/docker-compose.prod.yml exec nginx curl -f -s http://localhost/health > /dev/null 2>&1; then
                  echo "‚úÖ Nginx health endpoint working"
                else
                  echo "‚ùå Nginx health endpoint failed"
                fi
                
                # Test backend directly
                echo "üîç Testing backend container..."
                if sudo docker compose -f /root/MVPEVENT_i/docker-compose.prod.yml exec server curl -f -s http://localhost:5000/api/health > /dev/null 2>&1; then
                  echo "‚úÖ Backend health endpoint working"
                else
                  echo "‚ùå Backend health endpoint failed"
                fi
                
                echo "üìã Server logs:"
                sudo docker compose -f /root/MVPEVENT_i/docker-compose.prod.yml logs server --tail=50
                echo "üìã Nginx logs:"
                sudo docker compose -f /root/MVPEVENT_i/docker-compose.prod.yml logs nginx --tail=50
                exit 1
              fi
              
              # Test frontend accessibility with retries
              echo "üîç Testing frontend accessibility..."
              frontend_healthy=false
              for i in {1..5}; do
                if curl -f -s -k https://event-i.co.ke/ > /dev/null 2>&1; then
                  echo "‚úÖ Frontend accessibility check passed (attempt $i)"
                  frontend_healthy=true
                  break
                else
                  echo "‚è≥ Frontend accessibility check attempt $i failed, retrying..."
                  sleep 5
                fi
              done
              
              if [ "$frontend_healthy" = false ]; then
                echo "‚ùå Frontend accessibility check failed after 5 attempts"
                echo "üìã Client logs:"
                sudo docker compose -f /root/MVPEVENT_i/docker-compose.prod.yml logs client --tail=50
                echo "üìã Nginx logs:"
                sudo docker compose -f /root/MVPEVENT_i/docker-compose.prod.yml logs nginx --tail=50
                exit 1
              fi
              
              # Run image verification script
              echo "üîç Running image asset verification..."
              echo "üìÅ Checking scripts directory..."
              sudo ls -la /root/MVPEVENT_i/scripts/ || echo "No scripts directory found"
              
              if [ -f "/root/MVPEVENT_i/scripts/verify-images.sh" ]; then
                echo "üìÑ Found verify-images.sh script"
                echo "üìã Current permissions:"
                sudo ls -la /root/MVPEVENT_i/scripts/verify-images.sh
                echo "üîß Making script executable..."
                sudo chmod +x /root/MVPEVENT_i/scripts/verify-images.sh
                echo "üìã Updated permissions:"
                sudo ls -la /root/MVPEVENT_i/scripts/verify-images.sh
                echo "üöÄ Executing image verification script..."
                if sudo /root/MVPEVENT_i/scripts/verify-images.sh; then
                  echo "‚úÖ Image verification completed successfully"
                else
                  echo "‚ö†Ô∏è Image verification had warnings or failed, but continuing deployment"
                fi
              else
                echo "‚ö†Ô∏è verify-images.sh script not found, skipping verification"
                echo "üìÅ Available scripts in /root/MVPEVENT_i/scripts/:"
                sudo ls -la /root/MVPEVENT_i/scripts/ || echo "No scripts directory found"
              fi
              
              # Test email configuration with diagnostics
              echo "üîç Testing email configuration..."
              echo ""
              
              # Check and fix firewall rules for SMTP
              echo "üîí Checking firewall rules for SMTP..."
              if command -v ufw >/dev/null 2>&1; then
                echo "UFW firewall detected"
                # Allow outbound SMTP ports
                sudo ufw allow out 587/tcp comment 'SMTP Submission' 2>/dev/null || true
                sudo ufw allow out 465/tcp comment 'SMTP SSL' 2>/dev/null || true
                sudo ufw --force enable 2>/dev/null || true
                echo "‚úÖ Firewall rules updated"
              else
                echo "‚ö†Ô∏è UFW not found, checking iptables..."
                # Allow outbound SMTP via iptables if UFW not available
                sudo iptables -I OUTPUT -p tcp --dport 587 -j ACCEPT 2>/dev/null || true
                sudo iptables -I OUTPUT -p tcp --dport 465 -j ACCEPT 2>/dev/null || true
                echo "‚úÖ iptables rules updated"
              fi
              echo ""
              
              # Test network connectivity to SMTP server
              echo "üåê Testing network connectivity to SMTP server..."
              SMTP_HOST=$(sudo grep SMTP_HOST /root/MVPEVENT_i/.env | cut -d'=' -f2)
              SMTP_PORT=$(sudo grep SMTP_PORT /root/MVPEVENT_i/.env | cut -d'=' -f2)
              
              if sudo docker compose -f /root/MVPEVENT_i/docker-compose.prod.yml exec -T server nc -zv -w 5 ${SMTP_HOST} ${SMTP_PORT} 2>&1; then
                echo "‚úÖ Network connectivity OK"
              else
                echo "‚ùå Cannot reach SMTP server ${SMTP_HOST}:${SMTP_PORT}"
                echo "   This indicates a firewall or network issue"
              fi
              echo ""
              
              # First run diagnostics
              echo "Running SMTP diagnostics..."
              DIAG_OUTPUT=$(sudo docker compose -f /root/MVPEVENT_i/docker-compose.prod.yml exec -T server node scripts/test-email-debug.js 2>&1) || echo "‚ö†Ô∏è Diagnostic script not available"
              echo "$DIAG_OUTPUT"
              echo ""
              
              # Check if diagnostic found a working port
              WORKING_PORT=$(echo "$DIAG_OUTPUT" | grep -o "Standard TLS (port [0-9]*)" | grep -o "[0-9]*" | head -1 || echo "587")
              
              if [ ! -z "$WORKING_PORT" ] && [ "$WORKING_PORT" != "$SMTP_PORT" ]; then
                echo "‚ö†Ô∏è Port mismatch detected!"
                echo "   GitHub Secret SMTP_PORT: ${SMTP_PORT}"
                echo "   Working port from diagnostics: ${WORKING_PORT}"
                echo ""
                echo "üí° ACTION REQUIRED: Update GitHub Secret SMTP_PORT to ${WORKING_PORT}"
                echo "   Go to: Settings ‚Üí Secrets and variables ‚Üí Actions"
                echo "   Update SMTP_PORT to: ${WORKING_PORT}"
                echo ""
              fi
              
              # Then run basic test
              echo "Running basic SMTP test..."
              if sudo docker compose -f /root/MVPEVENT_i/docker-compose.prod.yml exec -T server node scripts/test-email.js; then
                echo "‚úÖ Email configuration test passed"
              else
                echo "‚ö†Ô∏è Email configuration test failed"
                echo ""
                if echo "$DIAG_OUTPUT" | grep -q "Test email sent successfully"; then
                  echo "‚úÖ Diagnostic test successfully sent email, but basic test failed."
                  echo "   This indicates SMTP_PORT in GitHub Secrets is incorrect."
                  echo ""
                  echo "üí° FIX: Update GitHub Secret SMTP_PORT to ${WORKING_PORT}"
                  echo "   1. Go to GitHub repository Settings ‚Üí Secrets"
                  echo "   2. Edit SMTP_PORT secret"
                  echo "   3. Set value to: ${WORKING_PORT}"
                  echo "   4. Redeploy"
                else
                  echo "üìã Other troubleshooting steps:"
                  echo "1. Check cloud provider firewall rules (GCP/AWS firewall)"
                  echo "2. Run manual test: sudo docker exec -it event_i_server_prod node scripts/test-email-debug.js"
                  echo "3. Test connectivity: sudo docker exec -it event_i_server_prod nc -zv ${SMTP_HOST} ${SMTP_PORT}"
                  echo "4. Review troubleshooting guide: docs/SMTP_TROUBLESHOOTING.md"
                fi
              fi
              echo ""
              
              # Show deployment summary
              echo "üìä Deployment Summary"
              echo "===================="
              echo "‚úÖ All containers rebuilt and restarted successfully"
              echo "‚úÖ API health check passed"
              echo "‚úÖ Frontend accessibility check passed"
              echo "‚úÖ Image assets verified"
              echo ""
              echo "üìã Container Status:"
              sudo docker compose -f /root/MVPEVENT_i/docker-compose.prod.yml ps --format "table {{.Name}}\t{{.Status}}\t{{.Ports}}"
              echo ""
              echo "üîó Service URLs:"
              echo "   Frontend: https://event-i.co.ke/"
              echo "   API:      https://event-i.co.ke/api/health"
              echo "   Health:   https://event-i.co.ke/health"
              echo "   Images:   https://event-i.co.ke/uploads/"
              echo ""
              echo "Recent logs (last 10 lines):"
              sudo docker compose -f /root/MVPEVENT_i/docker-compose.prod.yml logs --tail=10
              echo ""
              echo "Deployment completed successfully!"
            DEPLOYMENT_SCRIPT
            chmod +x /tmp/deploy.sh
            sudo bash /tmp/deploy.sh
            rm /tmp/deploy.sh
