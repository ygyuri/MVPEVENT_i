name: Build and Deploy to VM

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build images (no push)
        run: docker compose -f docker-compose.prod.yml build

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: always() && needs.build.result == 'success'
    steps:
      - uses: actions/checkout@v4
      - name: Create production environment file
        run: |
          cat > .env.production << 'EOF'
          # Application Configuration
          NODE_ENV=${{ secrets.NODE_ENV }}
          SERVER_PORT=${{ secrets.SERVER_PORT }}
          FRONTEND_URL=${{ secrets.FRONTEND_URL }}
          BASE_URL=${{ secrets.BASE_URL }}
          
          # GKE Configuration
          KUBERNETES_NAMESPACE=${{ secrets.KUBERNETES_NAMESPACE }}
          GKE_CLUSTER_NAME=${{ secrets.GKE_CLUSTER_NAME }}
          GKE_ZONE=${{ secrets.GKE_ZONE }}
          PROJECT_ID=${{ secrets.PROJECT_ID }}
          
          # Nginx Configuration
          NGINX_HTTP_PORT=${{ secrets.NGINX_HTTP_PORT }}
          NGINX_HTTPS_PORT=${{ secrets.NGINX_HTTPS_PORT }}
          
          # Database Configuration
          MONGO_ROOT_USERNAME=${{ secrets.MONGO_ROOT_USERNAME }}
          MONGO_ROOT_PASSWORD=${{ secrets.MONGO_ROOT_PASSWORD }}
          MONGODB_URI=${{ secrets.MONGODB_URI }}
          
          # Redis Configuration
          REDIS_URL=${{ secrets.REDIS_URL }}
          
          # JWT Configuration
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          JWT_REFRESH_SECRET=${{ secrets.JWT_REFRESH_SECRET }}
          JWT_EXPIRES_IN=${{ secrets.JWT_EXPIRES_IN }}
          JWT_REFRESH_EXPIRES_IN=${{ secrets.JWT_REFRESH_EXPIRES_IN }}
          
          # PayHero Configuration
          PAYHERO_API_USERNAME=${{ secrets.PAYHERO_API_USERNAME }}
          PAYHERO_API_PASSWORD=${{ secrets.PAYHERO_API_PASSWORD }}
          PAYHERO_ACCOUNT_ID=${{ secrets.PAYHERO_ACCOUNT_ID }}
          PAYHERO_BASIC_AUTH_TOKEN=${{ secrets.PAYHERO_BASIC_AUTH_TOKEN }}
          PAYHERO_CHANNEL_ID=${{ secrets.PAYHERO_CHANNEL_ID }}
          PAYHERO_CALLBACK_URL=${{ secrets.PAYHERO_CALLBACK_URL }}
          PAYHERO_SUCCESS_URL=${{ secrets.PAYHERO_SUCCESS_URL }}
          PAYHERO_FAILED_URL=${{ secrets.PAYHERO_FAILED_URL }}
          
          # MPESA Configuration
          MPESA_BASE_URL=${{ secrets.MPESA_BASE_URL }}
          MPESA_CONSUMER_KEY=${{ secrets.MPESA_CONSUMER_KEY }}
          MPESA_CONSUMER_SECRET=${{ secrets.MPESA_CONSUMER_SECRET }}
          MPESA_PASSKEY=${{ secrets.MPESA_PASSKEY }}
          MPESA_SHORTCODE=${{ secrets.MPESA_SHORTCODE }}
          MPESA_CALLBACK_URL=${{ secrets.MPESA_CALLBACK_URL }}
          MPESA_TIMEOUT_URL=${{ secrets.MPESA_TIMEOUT_URL }}
          
          # Email Configuration
          SMTP_HOST=${{ secrets.SMTP_HOST }}
          SMTP_PORT=${{ secrets.SMTP_PORT }}
          SMTP_USER=${{ secrets.SMTP_USER }}
          SMTP_PASS=${{ secrets.SMTP_PASS }}
          EMAIL_FROM=${{ secrets.EMAIL_FROM }}
          
          # Security Configuration
          TICKET_QR_SECRET=${{ secrets.TICKET_QR_SECRET }}
          TICKET_QR_ENC_KEY=${{ secrets.TICKET_QR_ENC_KEY }}
          TICKET_QR_AUTO_ROTATE_MS=${{ secrets.TICKET_QR_AUTO_ROTATE_MS }}
          
          # Rate Limiting
          RATE_LIMIT_WINDOW_MS=${{ secrets.RATE_LIMIT_WINDOW_MS }}
          RATE_LIMIT_MAX_REQUESTS=${{ secrets.RATE_LIMIT_MAX_REQUESTS }}
          
          # Debug Configuration
          DEBUG=${{ secrets.DEBUG }}
          LOG_LEVEL=${{ secrets.LOG_LEVEL }}
          
          # Monitoring and Logging
          SENTRY_DSN=${{ secrets.SENTRY_DSN }}
          LOG_TO_FILE=${{ secrets.LOG_TO_FILE }}
          LOG_FILE_PATH=${{ secrets.LOG_FILE_PATH }}
          EOF
      - name: Transfer environment file to VM
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          source: ".env.production"
          target: "/tmp/.env.production"
      - name: SSH deploy to VM
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          script: |
            set -e
            sudo bash -lc '
              set -e
              echo "🚀 Starting deployment..."
              
              # Ensure repo exists and is up to date
              if [ -d /root/MVPEVENT_i/.git ]; then
                echo "📁 Repository exists, updating..."
                cd /root/MVPEVENT_i
                git remote set-url origin https://github.com/ygyuri/MVPEVENT_i.git
                git fetch --all
                git reset --hard origin/main
              else
                echo "📁 Cloning repository..."
                rm -rf /root/MVPEVENT_i || true
                git clone https://github.com/ygyuri/MVPEVENT_i.git /root/MVPEVENT_i
                cd /root/MVPEVENT_i
              fi
              
              # Show current commit
              echo "📝 Current commit: $(git log --oneline -1)"
              
              # Move and secure environment file
              echo "🔐 Setting up environment file..."
              sudo mv /tmp/.env.production /root/MVPEVENT_i/.env.production
              sudo chown root:root /root/MVPEVENT_i/.env.production
              sudo chmod 600 /root/MVPEVENT_i/.env.production
              
              # Stop existing containers gracefully
              echo "🛑 Stopping existing containers..."
              docker compose -f docker-compose.prod.yml down --remove-orphans || true
              
              # Clean up old images and containers to save space
              echo "🧹 Cleaning up old Docker resources..."
              docker container prune -f || true
              docker image prune -f || true
              docker volume prune -f || true
              
              # Pull latest base images to ensure we have the most recent versions
              echo "📥 Pulling latest base images..."
              docker compose -f docker-compose.prod.yml pull || true
              
              # Build with no cache and force pull to ensure fresh builds
              echo "🔨 Building Docker images with fresh cache..."
              docker compose -f docker-compose.prod.yml build --no-cache --pull
              
              # Deploy with force recreate to ensure containers are restarted
              echo "🚀 Deploying containers with force recreate..."
              docker compose -f docker-compose.prod.yml up -d --force-recreate --remove-orphans
              
              # Wait for services to start and perform health checks
              echo "⏳ Waiting for services to start..."
              sleep 20
              
              # Verify deployment status
              echo "✅ Checking deployment status..."
              docker compose -f docker-compose.prod.yml ps
              
              # Check container health status
              echo "🔍 Checking container health..."
              docker compose -f docker-compose.prod.yml ps --format "table {{.Name}}\t{{.Status}}\t{{.Ports}}"
              
              # Wait for containers to be healthy
              echo "⏳ Waiting for containers to be healthy..."
              max_attempts=30
              attempt=1
              
              while [ $attempt -le $max_attempts ]; do
                echo "Health check attempt $attempt/$max_attempts..."
                
                # Check if all containers are running
                if docker compose -f docker-compose.prod.yml ps | grep -q "Up"; then
                  echo "✅ All containers are running"
                  break
                else
                  echo "⏳ Containers still starting..."
                  sleep 10
                  attempt=$((attempt + 1))
                fi
              done
              
              if [ $attempt -gt $max_attempts ]; then
                echo "❌ Containers failed to start within timeout"
                echo "📋 Container logs:"
                docker compose -f docker-compose.prod.yml logs --tail=50
                exit 1
              fi
              
              # Test API health with retries
              echo "🔍 Testing API health..."
              api_healthy=false
              for i in {1..5}; do
                # Test both direct API endpoint and nginx health endpoint using production domain
                if curl -f -s -k https://event-i.co.ke/api/health > /dev/null 2>&1 || curl -f -s -k https://event-i.co.ke/health > /dev/null 2>&1; then
                  echo "✅ API health check passed (attempt $i)"
                  api_healthy=true
                  break
                else
                  echo "⏳ API health check attempt $i failed, retrying..."
                  sleep 5
                fi
              done
              
              if [ "$api_healthy" = false ]; then
                echo "❌ API health check failed after 5 attempts"
                echo "📋 Testing individual components..."
                
                # Test nginx directly
                echo "🔍 Testing nginx container..."
                if docker compose -f docker-compose.prod.yml exec nginx curl -f -s http://localhost/health > /dev/null 2>&1; then
                  echo "✅ Nginx health endpoint working"
                else
                  echo "❌ Nginx health endpoint failed"
                fi
                
                # Test backend directly
                echo "🔍 Testing backend container..."
                if docker compose -f docker-compose.prod.yml exec server curl -f -s http://localhost:5000/api/health > /dev/null 2>&1; then
                  echo "✅ Backend health endpoint working"
                else
                  echo "❌ Backend health endpoint failed"
                fi
                
                echo "📋 Server logs:"
                docker compose -f docker-compose.prod.yml logs server --tail=50
                echo "📋 Nginx logs:"
                docker compose -f docker-compose.prod.yml logs nginx --tail=50
                exit 1
              fi
              
              # Test frontend accessibility with retries
              echo "🔍 Testing frontend accessibility..."
              frontend_healthy=false
              for i in {1..5}; do
                if curl -f -s -k https://event-i.co.ke/ > /dev/null 2>&1; then
                  echo "✅ Frontend accessibility check passed (attempt $i)"
                  frontend_healthy=true
                  break
                else
                  echo "⏳ Frontend accessibility check attempt $i failed, retrying..."
                  sleep 5
                fi
              done
              
              if [ "$frontend_healthy" = false ]; then
                echo "❌ Frontend accessibility check failed after 5 attempts"
                echo "📋 Client logs:"
                docker compose -f docker-compose.prod.yml logs client --tail=50
                echo "📋 Nginx logs:"
                docker compose -f docker-compose.prod.yml logs nginx --tail=50
                exit 1
              fi
              
              # Show deployment summary
              echo "📊 Deployment Summary"
              echo "===================="
              echo "✅ All containers rebuilt and restarted successfully"
              echo "✅ API health check passed"
              echo "✅ Frontend accessibility check passed"
              echo ""
              echo "📋 Container Status:"
              docker compose -f docker-compose.prod.yml ps --format "table {{.Name}}\t{{.Status}}\t{{.Ports}}"
              echo ""
              echo "🔗 Service URLs:"
              echo "   Frontend: https://event-i.co.ke/"
              echo "   API:      https://event-i.co.ke/api/health"
              echo "   Health:   https://event-i.co.ke/health"
              echo ""
              echo "📝 Recent logs (last 10 lines):"
              docker compose -f docker-compose.prod.yml logs --tail=10
              echo ""
              echo "🎉 Deployment completed successfully!"
            '

