const mongoose = require('mongoose');

const orderSchema = new mongoose.Schema({
  // Order identification
  orderNumber: {
    type: String,
    required: false // Generated by pre-save middleware
  },
  
  // Customer information (supports both authenticated and guest users)
  customer: {
    userId: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'User',
      required: false // Optional for guest checkout
    },
    email: {
      type: String,
      required: false, // Made optional for guest checkout
      lowercase: true,
      trim: true
    },
    firstName: {
      type: String,
      required: false, // Made optional for guest checkout
      trim: true,
      maxlength: 50
    },
    lastName: {
      type: String,
      required: false, // Made optional for guest checkout
      trim: true,
      maxlength: 50
    },
    phone: {
      type: String,
      required: true,
      trim: true
    }
  },

  // Guest checkout support
  customerInfo: {
    name: String,
    email: String,
    phone: String
  },
  
  // Guest order flag
  isGuestOrder: {
    type: Boolean,
    default: false
  },
  
  // Purchase source tracking
  purchaseSource: {
    type: String,
    enum: ['direct_checkout', 'cart', 'admin'],
    default: 'cart' // Backward compatibility with existing orders
  },
  
  // Order items (tickets)
  items: [{
    eventId: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'Event',
      required: true
    },
    eventTitle: {
      type: String,
      required: true
    },
    ticketType: {
      type: String,
      required: true
    },
    quantity: {
      type: Number,
      required: true,
      min: 1
    },
    unitPrice: {
      type: Number,
      required: true,
      min: 0
    },
    subtotal: {
      type: Number,
      required: true,
      min: 0
    }
  }],
  
  // Affiliate tracking (for referral commissions)
  affiliateTracking: {
    referralCode: {
      type: String,
      default: null,
      trim: true,
      uppercase: true
    },
    affiliateId: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'AffiliateMarketer',
      default: null
    },
    // Track if commission has been calculated
    commissionCalculated: {
      type: Boolean,
      default: false
    },
    // Store commission amount for quick access
    commissionAmount: {
      type: Number,
      default: 0,
      min: 0
    }
  },
  
  // Pricing breakdown
  pricing: {
    subtotal: {
      type: Number,
      required: true,
      min: 0
    },
    serviceFee: {
      type: Number,
      required: true,
      min: 0
    },
    total: {
      type: Number,
      required: true,
      min: 0
    },
    currency: {
      type: String,
      default: 'KES',
      maxlength: 3
    }
  },

  // Total amount (for PAYHERO compatibility)
  totalAmount: {
    type: Number,
    required: false,
    min: 0
  },

  // Fee breakdown (for PAYHERO)
  feeBreakdown: {
    subtotal: Number,
    processingFee: Number,
    fixedFee: Number,
    totalFees: Number,
    totalAmount: Number
  },
  
  // Payment details (MPESA / PesaPal / PAYHERO)
  payment: {
    method: {
      type: String,
      default: 'mpesa',
      enum: ['mpesa', 'pesapal', 'payhero']
    },
    status: {
      type: String,
      enum: ['pending', 'processing', 'completed', 'failed', 'cancelled'],
      default: 'pending'
    },
    // MPESA
    mpesaRequestId: String,
    mpesaCheckoutRequestId: String,
    mpesaMerchantRequestId: String,
    mpesaResultCode: String,
    mpesaResultDesc: String,
    mpesaTransactionId: String,
    // PesaPal
    pesapalTrackingId: String,
    pesapalMerchantReference: String,
    pesapalRedirectUrl: String,
    pesapalStatus: String,
    // PAYHERO
    paymentReference: String,
    checkoutRequestId: String,
    paymentProvider: String,
    paymentData: {
      amount: Number,
      phoneNumber: String,
      customerName: String
    },
    paymentResponse: {
      externalReference: String,
      checkoutRequestId: String,
      amount: Number,
      phone: String,
      status: String,
      resultCode: Number,
      resultDesc: String,
      mpesaReceiptNumber: String,
      merchantRequestId: String
    },
    mpesaReceiptNumber: String,
    paidAt: Date
  },

  // Payment status (for PAYHERO compatibility)
  paymentStatus: {
    type: String,
    enum: ['pending', 'processing', 'completed', 'failed', 'cancelled'],
    default: 'pending'
  },

  // Completion timestamp
  completedAt: Date,
  
  // Order status
  status: {
    type: String,
    enum: ['pending', 'paid', 'confirmed', 'cancelled', 'refunded', 'completed'],
    default: 'pending'
  },
  
  // Metadata
  metadata: {
    ipAddress: String,
    userAgent: String,
    source: {
      type: String,
      default: 'web'
    }
  }
}, {
  timestamps: true
});

// Indexes for performance
orderSchema.index({ orderNumber: 1 });
orderSchema.index({ 'customer.userId': 1 });
orderSchema.index({ 'customer.email': 1 });
orderSchema.index({ status: 1 });
orderSchema.index({ 'payment.status': 1 });
orderSchema.index({ createdAt: 1 });
orderSchema.index({ 'payment.mpesaTransactionId': 1 });
orderSchema.index({ purchaseSource: 1 }); // For filtering by purchase type
orderSchema.index({ 'affiliateTracking.referralCode': 1 }); // For referral lookups
orderSchema.index({ 'affiliateTracking.affiliateId': 1, createdAt: -1 }); // For affiliate sales reports
orderSchema.index({ 'affiliateTracking.affiliateId': 1, status: 1 }); // For commission calculations

// Pre-save middleware to generate order number
orderSchema.pre('save', function(next) {
  if (!this.orderNumber) {
    const timestamp = Date.now().toString();
    const random = Math.random().toString(36).substring(2, 8).toUpperCase();
    this.orderNumber = `ORD-${timestamp}-${random}`;
  }
  next();
});

// Helper methods for affiliate tracking
orderSchema.methods.setAffiliateTracking = function(referralCode, affiliateId) {
  if (!this.affiliateTracking) {
    this.affiliateTracking = {};
  }
  this.affiliateTracking.referralCode = referralCode;
  this.affiliateTracking.affiliateId = affiliateId;
  this.affiliateTracking.commissionCalculated = false;
  this.affiliateTracking.commissionAmount = 0;
  return this;
};

orderSchema.methods.hasAffiliateTracking = function() {
  return !!(this.affiliateTracking && 
    (this.affiliateTracking.referralCode || this.affiliateTracking.affiliateId));
};

orderSchema.methods.markCommissionCalculated = function(amount) {
  if (!this.affiliateTracking) {
    this.affiliateTracking = {};
  }
  this.affiliateTracking.commissionCalculated = true;
  this.affiliateTracking.commissionAmount = amount || 0;
  return this;
};

// Helper method to check if order is from direct checkout
orderSchema.methods.isDirectCheckout = function() {
  return this.purchaseSource === 'direct_checkout';
};

// Helper method to check if order is eligible for commission
orderSchema.methods.isEligibleForCommission = function() {
  return this.hasAffiliateTracking() && 
    (this.status === 'paid' || this.status === 'completed') &&
    !this.affiliateTracking.commissionCalculated;
};

// Virtual for customer full name
orderSchema.virtual('customer.fullName').get(function() {
  return `${this.customer.firstName} ${this.customer.lastName}`;
});

// Virtual for order summary
orderSchema.virtual('summary').get(function() {
  const totalItems = this.items.reduce((sum, item) => sum + item.quantity, 0);
  return {
    totalItems,
    totalAmount: this.pricing.total,
    currency: this.pricing.currency
  };
});

// JSON serialization
orderSchema.set('toJSON', {
  virtuals: true,
  transform: function(doc, ret) {
    ret.id = ret._id;
    delete ret._id;
    delete ret.__v;
    return ret;
  }
});

module.exports = mongoose.model('Order', orderSchema);
