services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: event_i_mongodb_prod
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-password123}
      MONGO_INITDB_DATABASE: event_i
    # Don't expose MongoDB port in production - only accessible internally
    # ports:
    #   - "27017:27017"
    volumes:
      - mongodb_data_prod:/data/db
    networks:
      - event_i_network_prod
    command: mongod --auth
    restart: unless-stopped

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: event_i_redis_prod
    # Don't expose Redis port in production - only accessible internally
    # ports:
    #   - "6379:6379"
    volumes:
      - redis_data_prod:/data
    networks:
      - event_i_network_prod
    restart: unless-stopped

  # Backend API Server
  server:
    build:
      context: ./server
      dockerfile: Dockerfile.prod
    container_name: event_i_server_prod
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      MONGODB_URI: ${MONGODB_URI}
      REDIS_URL: ${REDIS_URL}
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN}
      JWT_REFRESH_EXPIRES_IN: ${JWT_REFRESH_EXPIRES_IN}
      PORT: ${SERVER_PORT:-5000}
      FRONTEND_URL: ${FRONTEND_URL}
      BASE_URL: ${BASE_URL}
      # PayHero Configuration
      PAYHERO_API_USERNAME: ${PAYHERO_API_USERNAME}
      PAYHERO_API_PASSWORD: ${PAYHERO_API_PASSWORD}
      PAYHERO_ACCOUNT_ID: ${PAYHERO_ACCOUNT_ID}
      PAYHERO_BASIC_AUTH_TOKEN: ${PAYHERO_BASIC_AUTH_TOKEN}
      PAYHERO_CHANNEL_ID: ${PAYHERO_CHANNEL_ID}
      PAYHERO_CALLBACK_URL: ${PAYHERO_CALLBACK_URL}
      PAYHERO_SUCCESS_URL: ${PAYHERO_SUCCESS_URL}
      PAYHERO_FAILED_URL: ${PAYHERO_FAILED_URL}
      # MPESA Configuration
      MPESA_BASE_URL: ${MPESA_BASE_URL}
      MPESA_CONSUMER_KEY: ${MPESA_CONSUMER_KEY}
      MPESA_CONSUMER_SECRET: ${MPESA_CONSUMER_SECRET}
      MPESA_PASSKEY: ${MPESA_PASSKEY}
      MPESA_SHORTCODE: ${MPESA_SHORTCODE}
      MPESA_CALLBACK_URL: ${MPESA_CALLBACK_URL}
      MPESA_TIMEOUT_URL: ${MPESA_TIMEOUT_URL}
      # Email Configuration
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
      EMAIL_FROM: ${EMAIL_FROM}
      # Security Configuration
      TICKET_QR_SECRET: ${TICKET_QR_SECRET}
      TICKET_QR_ENC_KEY: ${TICKET_QR_ENC_KEY}
      TICKET_QR_AUTO_ROTATE_MS: ${TICKET_QR_AUTO_ROTATE_MS}
      # Rate Limiting
      RATE_LIMIT_WINDOW_MS: ${RATE_LIMIT_WINDOW_MS}
      RATE_LIMIT_MAX_REQUESTS: ${RATE_LIMIT_MAX_REQUESTS}
      # Debug Configuration
      DEBUG: ${DEBUG}
      LOG_LEVEL: ${LOG_LEVEL}
      # Monitoring
      SENTRY_DSN: ${SENTRY_DSN}
      LOG_TO_FILE: ${LOG_TO_FILE}
      LOG_FILE_PATH: ${LOG_FILE_PATH}
    # Don't expose server port directly - access through nginx
    # ports:
    #   - "5000:5000"
    depends_on:
      - mongodb
      - redis
    networks:
      - event_i_network_prod
    restart: unless-stopped
    command: sh -c "sleep 15 && npm start"

  # Frontend Client
  client:
    build:
      context: ./client
      dockerfile: Dockerfile.prod
    container_name: event_i_client_prod
    environment:
      VITE_API_URL: ${FRONTEND_URL:-https://event-i.co.ke}
    # Don't expose client port directly - access through nginx
    # ports:
    #   - "3000:3000"
    depends_on:
      - server
    networks:
      - event_i_network_prod
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: event_i_nginx_prod
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - server
      - client
    networks:
      - event_i_network_prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  mongodb_data_prod:
  redis_data_prod:
  nginx_logs:

networks:
  event_i_network_prod:
    driver: bridge



