version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: event_i_mongodb_prod
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-password123}
      MONGO_INITDB_DATABASE: event_i
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data_prod:/data/db
    networks:
      - event_i_network_prod
    command: mongod --auth
    restart: unless-stopped

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: event_i_redis_prod
    ports:
      - "6379:6379"
    volumes:
      - redis_data_prod:/data
    networks:
      - event_i_network_prod
    restart: unless-stopped

  # Backend API Server
  server:
    build:
      context: ./server
      dockerfile: Dockerfile.prod
    container_name: event_i_server_prod
    environment:
      NODE_ENV: production
      MONGODB_URI: mongodb://${MONGO_ROOT_USERNAME:-admin}:${MONGO_ROOT_PASSWORD:-password123}@mongodb:27017/event_i?authSource=admin
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      PORT: 5000
    ports:
      - "5000:5000"
    depends_on:
      - mongodb
      - redis
    networks:
      - event_i_network_prod
    restart: unless-stopped
    command: sh -c "sleep 15 && npm run seed && npm start"

  # Frontend Client
  client:
    build:
      context: ./client
      dockerfile: Dockerfile.prod
    container_name: event_i_client_prod
    environment:
      VITE_API_URL: http://localhost:5000
    ports:
      - "3000:3000"
    depends_on:
      - server
    networks:
      - event_i_network_prod
    restart: unless-stopped

  # Nginx Reverse Proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: event_i_nginx_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - server
      - client
    networks:
      - event_i_network_prod
    restart: unless-stopped

volumes:
  mongodb_data_prod:
  redis_data_prod:

networks:
  event_i_network_prod:
    driver: bridge



