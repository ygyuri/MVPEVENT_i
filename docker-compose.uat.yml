services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: event_i_mongodb_uat
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-uat-secure-mongodb-password}
      MONGO_INITDB_DATABASE: event_i_uat
    # Don't expose MongoDB port in UAT - only accessible internally
    # ports:
    #   - "27017:27017"
    volumes:
      - mongodb_data_uat:/data/db
    networks:
      - event_i_network_uat
    command: mongod --auth
    restart: unless-stopped

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: event_i_redis_uat
    # Don't expose Redis port in UAT - only accessible internally
    # ports:
    #   - "6379:6379"
    volumes:
      - redis_data_uat:/data
    networks:
      - event_i_network_uat
    restart: unless-stopped

  # Backend API Server
  server:
    build:
      context: ./server
      dockerfile: Dockerfile.prod
    container_name: event_i_server_uat
    environment:
      NODE_ENV: uat
      MONGODB_URI: mongodb://${MONGO_ROOT_USERNAME:-admin}:${MONGO_ROOT_PASSWORD:-uat-secure-mongodb-password}@mongodb:27017/event_i_uat?authSource=admin
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      PORT: ${SERVER_PORT:-5000}
    # Don't expose server port directly - access through nginx
    # ports:
    #   - "5000:5000"
    depends_on:
      - mongodb
      - redis
    networks:
      - event_i_network_uat
    restart: unless-stopped
    command: sh -c "sleep 15 && npm run seed && npm start"

  # Frontend Client
  client:
    build:
      context: ./client
      dockerfile: Dockerfile.prod
    container_name: event_i_client_uat
    environment:
      VITE_API_URL: ${FRONTEND_URL:-https://uat.event-i.com}
    # Don't expose client port directly - access through nginx
    # ports:
    #   - "3000:3000"
    depends_on:
      - server
    networks:
      - event_i_network_uat
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: event_i_nginx_uat
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.uat.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs_uat:/var/log/nginx
    depends_on:
      - server
      - client
    networks:
      - event_i_network_uat
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  mongodb_data_uat:
  redis_data_uat:
  nginx_logs_uat:

networks:
  event_i_network_uat:
    driver: bridge
